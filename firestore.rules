rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/adminAccess/authorizedEmails) && 
        request.auth.token.email in get(/databases/$(database)/documents/adminAccess/authorizedEmails).data.emails;
    }
    // Allow access to userProgress collection
    match /userProgress/{userId} {
      // Allow read/write if the user is authenticated and accessing their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow access to subcollections (quizzes and overview)
      match /{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow access to allowedEmails collection
    match /allowedEmails/{document} {
      allow read: if true;  // Anyone can check if their email is allowed
      allow write: if isAdmin();  // Only admin can modify allowed emails
    }
    
    // Allow access to registrationRequests collection
    match /registrationRequests/{document} {
      allow read: if true;  // Anyone can read registration requests
      allow create: if 
        request.resource.data.keys().hasAll(['email', 'status', 'createdAt']) &&
        request.resource.data.email is string &&
        request.resource.data.status == 'pending';
      allow update, delete: if isAdmin();  // Only admin can modify requests
    }

    // Allow access to moleculeRatings collection
    match /moleculeRatings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow access to moleculeSettings collection
    match /moleculeSettings/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow access to adminAccess collection
    match /adminAccess/{document} {
      allow read: if request.auth != null;  // Any authenticated user can check admin status
      allow write: if false;  // Only through Firebase Admin SDK
    }
  }
}